# Pipeline Stages

stages:
#  - test
#  - analysis
  - build
  - docker
  - deploy

# Abstractions

image: larsdroid/integratieproject1:v1

cache:
  key: "gradleBuildCache"
  policy: pull-push
  paths:
    - build
    - .gradle

variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  # To Access PassTo Swagger
  GIT_SUBMODULE_STRATEGY: recursive
  # Required by SonarQube
  GIT_DEPTH: 0
  IMAGE_TAG: ${CI_COMMIT_SHORT_SHA}
  RELEASE_NAME: aljannah-app

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle


Build:
  stage: build
  script:
#    - gradle --build-cache sonarqube -x test
    - gradle --build-cache
  artifacts:
    paths:
      - build/libs/jannah-app*.jar
      - gradle appengineDeploy

deploy:
  stage: deploy
  script:
      - gcloud auth activate-service-account --key-file $GOOGLE_SERVICE_ACCOUNT_FILE
      - gcloud app deploy app.yaml --quiet --project $GOOGLE_PROJECT_ID
  only:
      - master

#
# .docker_job: &docker_job
#   stage: docker
#   image:
#     name: gcr.io/kaniko-project/executor:debug-v0.19.0
#     entrypoint: [""]
#   script:
#     - export GOOGLE_APPLICATION_CREDENTIALS=/kaniko/kaniko-secret.json
#     - echo ${TEST_SERVICE_ACCOUNT} | base64 -d > ${GOOGLE_APPLICATION_CREDENTIALS}
#     - /kaniko/executor --context ${CI_PROJECT_DIR} --dockerfile ${CI_PROJECT_DIR}/Dockerfile --destination ${CONTAINER_IMAGE}:${IMAGE_TAG} --destination ${CONTAINER_IMAGE}:latest
#
# build test image:
#   variables:
#     CONTAINER_IMAGE: ${REGISTRY_HOSTNAME}/${GC_PROJECT_ID}/${CI_PROJECT_NAME}/testing
#   <<: *docker_job
#   only:
#     - development
#     - master
#
# build prod image:
#   variables:
#     CONTAINER_IMAGE: ${REGISTRY_HOSTNAME}/${GC_PROJECT_ID}/${CI_PROJECT_NAME}/production
#     IMAGE_TAG: ${CI_COMMIT_TAG}
#   <<: *docker_job
#   only:
#     - /^v(\d+\.)?(\d+\.)?(\*|\d+)$/
#
# .helm_job: &helm_job
#   stage: deploy
#   image: hibrahem/gcloud-helm-istio:v1.0
#   script:
#     - echo ${TEST_SERVICE_ACCOUNT} | base64 -d > ${HOME}/gcloud-service-key.json
#     - export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json
#     - gcloud auth activate-service-account --key-file ${GOOGLE_APPLICATION_CREDENTIALS}
#     - gcloud container clusters get-credentials ${CLUSTER_NAME} --zone ${GC_PROJECT_ZONE} --project ${GC_PROJECT_ID}
#
#     - cd ./deployment
#     - helm secrets upgrade ${RELEASE_NAME} ${HELM_FOLDER} --install --set image.repository=${CONTAINER_IMAGE},image.tag=${IMAGE_TAG} -f ${HELM_SECRETS_FILE} -f ${HELM_VALUES_FILE}
#
# deploy testing env:
#   variables:
#     CONTAINER_IMAGE: ${REGISTRY_HOSTNAME}/${GC_PROJECT_ID}/${CI_PROJECT_NAME}/testing
#     HELM_FOLDER: ./aljannah-app
#     HELM_SECRETS_FILE: ${HELM_FOLDER}/secrets.yaml
#     HELM_VALUES_FILE: ${HELM_FOLDER}/values.yaml
#   <<: *helm_job
#   only:
#     - development
#     - master
#
#
# deploy prod env:
#   variables:
#     CONTAINER_IMAGE: ${REGISTRY_HOSTNAME}/${GC_PROJECT_ID}/${CI_PROJECT_NAME}/production
#     IMAGE_TAG: ${CI_COMMIT_TAG}
#     HELM_FOLDER: ./aljannah-app
#     HELM_SECRETS_FILE: ${HELM_FOLDER}/secrets.production.yaml
#     HELM_VALUES_FILE: ${HELM_FOLDER}/values.production.yaml
#   <<: *helm_job
#   only:  #only when tag with this regix format v1.8.9
#     - /^v(\d+\.)?(\d+\.)?(\*|\d+)$/
#   except:
#     - branches
#